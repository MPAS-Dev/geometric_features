name: CI/CD Build Workflow

on:
  push:
    branches:
      - main

  pull_request:
    branches:
      - main

  workflow_dispatch:

env:
  CANCEL_OTHERS: false
  PATHS_IGNORE: '["**/README.md", "**/docs/**"]'

jobs:
  pre-commit-hooks:
    name: lint with pre-commit
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@master
        with:
          cancel_others: ${{ env.CANCEL_OTHERS }}
          paths_ignore: ${{ env.PATHS_IGNORE }}

      - if: ${{ steps.skip_check.outputs.should_skip != 'true' }}
        name: Checkout Code Repository
        uses: actions/checkout@v4

      - if: ${{ steps.skip_check.outputs.should_skip != 'true' }}
        name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - if: ${{ steps.skip_check.outputs.should_skip != 'true' }}
        # Run all pre-commit hooks on all the files.
        # Getting only staged files can be tricky in case a new PR is opened
        # since the action is run on a branch in detached head state
        name: Install and Run Pre-commit
        uses: pre-commit/action@v3.0.1

  build:
    name: test geometric_features - python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    timeout-minutes: 20
    defaults:
      run:
        shell: bash -l {0}
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
      fail-fast: false
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@master
        with:
          cancel_others: ${{ env.CANCEL_OTHERS }}
          paths_ignore: ${{ env.PATHS_IGNORE }}

      - if: ${{ steps.skip_check.outputs.should_skip != 'true' }}
        uses: actions/checkout@v4

      - if: ${{ steps.skip_check.outputs.should_skip != 'true' }}
        name: Cache Conda
        uses: actions/cache@v4
        env:
          # Increase this value to reset cache if conda-dev-spec.template has not changed in the workflow
          CACHE_NUMBER: 0
        with:
          path: ~/conda_pkgs_dir
          key:
            ${{ runner.os }}-${{ matrix.python-version }}-conda-${{ env.CACHE_NUMBER }}-${{
            hashFiles('dev-spec.txt,setup.py') }}

      - if: ${{ steps.skip_check.outputs.should_skip != 'true' }}
        name: Set up Conda Environment
        uses: conda-incubator/setup-miniconda@v3
        with:
          activate-environment: "geometric_features_ci"
          miniforge-version: latest
          channels: conda-forge
          channel-priority: strict
          auto-update-conda: true
          python-version: ${{ matrix.python-version }}

      - if: ${{ steps.skip_check.outputs.should_skip != 'true' }}
        name: Install geometric_features
        run: |
          conda create -n geometric_features_dev --file dev-spec.txt \
              python=${{ matrix.python-version }}
          conda activate geometric_features_dev
          python -m pip install --no-deps --no-build-isolation -vv -e .

      - if: ${{ steps.skip_check.outputs.should_skip != 'true' }}
        name: Run Tests
        env:
           CHECK_IMAGES: False
        run: |
          set -e
          conda activate geometric_features_dev
          pip check
          pytest --pyargs geometric_features
          combine_features -v
          difference_features -v
          fix_features_at_antimeridian -v
          merge_features -v
          plot_features -v
          set_group_name -v
          simplify_features -v
          split_features -v
          tag_features -v

      - if: ${{ steps.skip_check.outputs.should_skip != 'true' }}
        name: Build Sphinx Docs
        run: |
          conda activate geometric_features_dev
          # sphinx-multiversion expects at least a "main" branch
          git branch main || echo "branch main already exists."
          cd docs
          sphinx-multiversion . _build/html

